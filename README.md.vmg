#set ($language="Text")
#set ($description="README file")
#set ($author="Evol Johnson")
#set ($overwrite="true")
#set ($enabled="true")
#set ($header="false")
#set ($price=0)
#set ($filep="README.md")
#set ($filename="${outputDir}/${project.name}/${filep}")
#parse("common/utils.parse")
${h} Kitura ${project.name} Backend
1. Build ${project.name} application

  1. Mac OS X: 
	
	`swift build -Xcc -fblocks -Xswiftc -I/usr/local/include -Xlinker -L/usr/local/lib`
	
  2. Linux:
  
    `swift build -Xcc -fblocks`
	
2. Run the ${project.name} application:

	`./.build/debug/${project.name}`
	
3. Open up your browser, and view: 

   [http://localhost:9000](http://localhost:9000)


${h}${h}Tests
  To run unit tests, run:
  `swift test`

${h} Generatron
You can modify the model.yaml and the generatron.yaml files to fit your needs and use other generators.
1) Place the code you received in a git repo, (generatronServer needs write permissions to the repos you outputting to)
2) `gtron harvest <git url to the repo> ${project.name}`
3) `gtron specs`
4) `gtron usespec ${project.name}` [this is optional]
5) `gtron devs` [this is optional]
6) `gtron generate using <developerName>`